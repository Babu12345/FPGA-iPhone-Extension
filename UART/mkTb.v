//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Thu Dec 13 00:49:03 UTC 2018
//
//
// Ports:
// Name                         I/O  size props
// USBPU                          O     1 const
// RDY_usbpu                      O     1 const
// PIN_24                         O     1
// RDY_uart_tx                    O     1
// PIN_22                         O     1 const
// RDY_led                        O     1 const
// RDY_uart_rx                    O     1 const
// CLK_slow_clockUART_TX          O     1 clock
// CLK_GATE_slow_clockUART_TX     O     1 const
// CLK_slow_clockLED              O     1 clock
// CLK_GATE_slow_clockLED         O     1 const
// CLK_slow_clockUART_RX          O     1 clock
// CLK_GATE_slow_clockUART_RX     O     1 const
// CLK                            I     1 clock
// RST                            I     1 reset
// uart_rx_data_bit               I     1
// EN_uart_rx                     I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST,

	    USBPU,
	    RDY_usbpu,

	    PIN_24,
	    RDY_uart_tx,

	    PIN_22,
	    RDY_led,

	    uart_rx_data_bit,
	    EN_uart_rx,
	    RDY_uart_rx,

	    CLK_slow_clockUART_TX,
	    CLK_GATE_slow_clockUART_TX,

	    CLK_slow_clockLED,
	    CLK_GATE_slow_clockLED,

	    CLK_slow_clockUART_RX,
	    CLK_GATE_slow_clockUART_RX);
  input  CLK;
  input  RST;

  // value method usbpu
  output USBPU;
  output RDY_usbpu;

  // value method uart_tx
  output PIN_24;
  output RDY_uart_tx;

  // value method led
  output PIN_22;
  output RDY_led;

  // action method uart_rx
  input  uart_rx_data_bit;
  input  EN_uart_rx;
  output RDY_uart_rx;

  // oscillator and gates for output clock CLK_slow_clockUART_TX
  output CLK_slow_clockUART_TX;
  output CLK_GATE_slow_clockUART_TX;

  // oscillator and gates for output clock CLK_slow_clockLED
  output CLK_slow_clockLED;
  output CLK_GATE_slow_clockLED;

  // oscillator and gates for output clock CLK_slow_clockUART_RX
  output CLK_slow_clockUART_RX;
  output CLK_GATE_slow_clockUART_RX;

  // signals for module outputs
  wire CLK_GATE_slow_clockLED,
       CLK_GATE_slow_clockUART_RX,
       CLK_GATE_slow_clockUART_TX,
       CLK_slow_clockLED,
       CLK_slow_clockUART_RX,
       CLK_slow_clockUART_TX,
       PIN_22,
       PIN_24,
       RDY_led,
       RDY_uart_rx,
       RDY_uart_tx,
       RDY_usbpu,
       USBPU;

  // register counter
  reg counter;
  wire counter$D_IN, counter$EN;

  // register state1
  reg [2 : 0] state1;
  reg [2 : 0] state1$D_IN;
  wire state1$EN;

  // ports of submodule led_c1
  wire led_c1$CLK_OUT;

  // ports of submodule rx
  wire rx$CLK_slow_clock,
       rx$EN_data_input,
       rx$EN_output_data,
       rx$data_input_data_bit;

  // ports of submodule tx
  reg [7 : 0] tx$data_store_data;
  wire tx$CLK_slow_clock,
       tx$EN_data_store,
       tx$RDY_data_send,
       tx$RDY_data_store,
       tx$data_send;

  // rule scheduling signals
  wire WILL_FIRE_RL_sendSignal1,
       WILL_FIRE_RL_sendSignal2,
       WILL_FIRE_RL_sendSignal3,
       WILL_FIRE_RL_sendSignal4,
       WILL_FIRE_RL_sendSignal5;

  // inputs to muxes for submodule ports
  wire MUX_tx$data_store_1__SEL_3;

  // remaining internal signals
  wire [1 : 0] _1__q1;

  // oscillator and gates for output clock CLK_slow_clockUART_TX
  assign CLK_slow_clockUART_TX = tx$CLK_slow_clock ;
  assign CLK_GATE_slow_clockUART_TX = 1'b1 ;

  // oscillator and gates for output clock CLK_slow_clockLED
  assign CLK_slow_clockLED = led_c1$CLK_OUT ;
  assign CLK_GATE_slow_clockLED = 1'b1 ;

  // oscillator and gates for output clock CLK_slow_clockUART_RX
  assign CLK_slow_clockUART_RX = rx$CLK_slow_clock ;
  assign CLK_GATE_slow_clockUART_RX = 1'b1 ;

  // value method usbpu
  assign USBPU = 1'b0 ;
  assign RDY_usbpu = 1'd1 ;

  // value method uart_tx
  assign PIN_24 = tx$data_send ;
  assign RDY_uart_tx = tx$RDY_data_send ;

  // value method led
  assign PIN_22 = _1__q1[counter] ;
  assign RDY_led = 1'd1 ;

  // action method uart_rx
  assign RDY_uart_rx = 1'd1 ;

  // submodule led_c1
  ClockDiv #(.width(32'd24),
	     .lower(32'd388608),
	     .upper(32'd16388607),
	     .offset(32'd0)) led_c1(.CLK_IN(CLK),
				    .RST(!`BSV_RESET_VALUE),
				    .PREEDGE(),
				    .CLK_OUT(led_c1$CLK_OUT));

  // submodule rx
  mkRX rx(.baud_rate(32'd115200),
	  .clockSpeed(32'd16000000),
	  .CLK(CLK),
	  .RST_N(RST),
	  .data_input_data_bit(rx$data_input_data_bit),
	  .EN_data_input(rx$EN_data_input),
	  .EN_output_data(rx$EN_output_data),
	  .RDY_data_input(),
	  .output_data(),
	  .RDY_output_data(),
	  .CLK_slow_clock(rx$CLK_slow_clock),
	  .CLK_GATE_slow_clock());

  // submodule tx
  mkTX tx(.baud_rate(32'd115200),
	  .clockSpeed(32'd16000000),
	  .CLK(CLK),
	  .RST_N(RST),
	  .data_store_data(tx$data_store_data),
	  .EN_data_store(tx$EN_data_store),
	  .RDY_data_store(tx$RDY_data_store),
	  .data_send(tx$data_send),
	  .RDY_data_send(tx$RDY_data_send),
	  .CLK_slow_clock(tx$CLK_slow_clock),
	  .CLK_GATE_slow_clock());

  // rule RL_sendSignal1
  assign WILL_FIRE_RL_sendSignal1 = tx$RDY_data_store && state1 == 3'd0 ;

  // rule RL_sendSignal2
  assign WILL_FIRE_RL_sendSignal2 = tx$RDY_data_store && state1 == 3'd1 ;

  // rule RL_sendSignal3
  assign WILL_FIRE_RL_sendSignal3 = tx$RDY_data_store && state1 == 3'd2 ;

  // rule RL_sendSignal4
  assign WILL_FIRE_RL_sendSignal4 = tx$RDY_data_store && state1 == 3'd3 ;

  // rule RL_sendSignal5
  assign WILL_FIRE_RL_sendSignal5 = tx$RDY_data_store && state1 == 3'd4 ;

  // inputs to muxes for submodule ports
  assign MUX_tx$data_store_1__SEL_3 =
	     WILL_FIRE_RL_sendSignal3 || WILL_FIRE_RL_sendSignal1 ;

  // register counter
  assign counter$D_IN = counter + 1'd1 ;
  assign counter$EN = 1'd1 ;

  // register state1
  always@(WILL_FIRE_RL_sendSignal5 or
	  WILL_FIRE_RL_sendSignal1 or
	  WILL_FIRE_RL_sendSignal2 or
	  WILL_FIRE_RL_sendSignal3 or WILL_FIRE_RL_sendSignal4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_sendSignal5: state1$D_IN = 3'd0;
      WILL_FIRE_RL_sendSignal1: state1$D_IN = 3'd1;
      WILL_FIRE_RL_sendSignal2: state1$D_IN = 3'd2;
      WILL_FIRE_RL_sendSignal3: state1$D_IN = 3'd3;
      WILL_FIRE_RL_sendSignal4: state1$D_IN = 3'd4;
      default: state1$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign state1$EN =
	     WILL_FIRE_RL_sendSignal5 || WILL_FIRE_RL_sendSignal1 ||
	     WILL_FIRE_RL_sendSignal2 ||
	     WILL_FIRE_RL_sendSignal3 ||
	     WILL_FIRE_RL_sendSignal4 ;

  // submodule rx
  assign rx$data_input_data_bit = uart_rx_data_bit ;
  assign rx$EN_data_input = EN_uart_rx ;
  assign rx$EN_output_data = 1'b0 ;

  // submodule tx
  always@(WILL_FIRE_RL_sendSignal5 or
	  WILL_FIRE_RL_sendSignal2 or
	  MUX_tx$data_store_1__SEL_3 or WILL_FIRE_RL_sendSignal4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_sendSignal5: tx$data_store_data = 8'h20;
      WILL_FIRE_RL_sendSignal2: tx$data_store_data = 8'h41;
      MUX_tx$data_store_1__SEL_3: tx$data_store_data = 8'h42;
      WILL_FIRE_RL_sendSignal4: tx$data_store_data = 8'h55;
      default: tx$data_store_data = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign tx$EN_data_store =
	     WILL_FIRE_RL_sendSignal5 || WILL_FIRE_RL_sendSignal2 ||
	     WILL_FIRE_RL_sendSignal3 ||
	     WILL_FIRE_RL_sendSignal1 ||
	     WILL_FIRE_RL_sendSignal4 ;

  // remaining internal signals
  assign _1__q1 = 2'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!`BSV_RESET_VALUE == `BSV_RESET_VALUE)
      begin
        state1 <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (state1$EN) state1 <= `BSV_ASSIGNMENT_DELAY state1$D_IN;
      end
  end

  always@(posedge led_c1$CLK_OUT)
  begin
    if (!`BSV_RESET_VALUE == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
      end
  end


  initial
  begin
    counter = 1'h0;
    state1 = 3'h0;
  end

endmodule  // mkTb

