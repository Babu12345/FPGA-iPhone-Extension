//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Thu Dec  6 03:36:59 UTC 2018
//
//
// Ports:
// Name                         I/O  size props
// USBPU                          O     1 const
// RDY_usbpu                      O     1 const
// PIN_24                         O     1
// RDY_uart_tx                    O     1
// PIN_22                         O     1 const
// RDY_led                        O     1 const
// CLK_slow_clockUART             O     1 clock
// CLK_GATE_slow_clockUART        O     1 const
// CLK_slow_clockLED              O     1 clock
// CLK_GATE_slow_clockLED         O     1 const
// CLK                            I     1 clock
// RST                            I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST,

	    USBPU,
	    RDY_usbpu,

	    PIN_24,
	    RDY_uart_tx,

	    PIN_22,
	    RDY_led,

	    CLK_slow_clockUART,
	    CLK_GATE_slow_clockUART,

	    CLK_slow_clockLED,
	    CLK_GATE_slow_clockLED);
  input  CLK;
  input  RST;

  // value method usbpu
  output USBPU;
  output RDY_usbpu;

  // value method uart_tx
  output PIN_24;
  output RDY_uart_tx;

  // value method led
  output PIN_22;
  output RDY_led;

  // oscillator and gates for output clock CLK_slow_clockUART
  output CLK_slow_clockUART;
  output CLK_GATE_slow_clockUART;

  // oscillator and gates for output clock CLK_slow_clockLED
  output CLK_slow_clockLED;
  output CLK_GATE_slow_clockLED;

  // signals for module outputs
  wire CLK_GATE_slow_clockLED,
       CLK_GATE_slow_clockUART,
       CLK_slow_clockLED,
       CLK_slow_clockUART,
       PIN_22,
       PIN_24,
       RDY_led,
       RDY_uart_tx,
       RDY_usbpu,
       USBPU;

  // register counter
  reg counter;
  wire counter$D_IN, counter$EN;

  // register state1
  reg state1;
  wire state1$D_IN, state1$EN;

  // ports of submodule led_c1
  wire led_c1$CLK_OUT;

  // ports of submodule tx
  wire [7 : 0] tx$data_store_data;
  wire tx$CLK_slow_clock,
       tx$EN_data_store,
       tx$RDY_data_send,
       tx$RDY_data_store,
       tx$data_send;

  // rule scheduling signals
  wire WILL_FIRE_RL_sendBuffer, WILL_FIRE_RL_sendSignal;

  // remaining internal signals
  wire [1 : 0] _1__q1;

  // oscillator and gates for output clock CLK_slow_clockUART
  assign CLK_slow_clockUART = tx$CLK_slow_clock ;
  assign CLK_GATE_slow_clockUART = 1'b1 ;

  // oscillator and gates for output clock CLK_slow_clockLED
  assign CLK_slow_clockLED = led_c1$CLK_OUT ;
  assign CLK_GATE_slow_clockLED = 1'b1 ;

  // value method usbpu
  assign USBPU = 1'b0 ;
  assign RDY_usbpu = 1'd1 ;

  // value method uart_tx
  assign PIN_24 = tx$data_send ;
  assign RDY_uart_tx = tx$RDY_data_send ;

  // value method led
  assign PIN_22 = _1__q1[counter] ;
  assign RDY_led = 1'd1 ;

  // submodule led_c1
  ClockDiv #(.width(32'd24),
	     .lower(32'd388608),
	     .upper(32'd16388607),
	     .offset(32'd0)) led_c1(.CLK_IN(CLK),
				    .RST(!`BSV_RESET_VALUE),
				    .PREEDGE(),
				    .CLK_OUT(led_c1$CLK_OUT));

  // submodule tx
  mkTX tx(.baud_rate(32'd115200),
	  .clockSpeed(32'd16000000),
	  .CLK(CLK),
	  .RST_N(RST),
	  .data_store_data(tx$data_store_data),
	  .EN_data_store(tx$EN_data_store),
	  .RDY_data_store(tx$RDY_data_store),
	  .data_send(tx$data_send),
	  .RDY_data_send(tx$RDY_data_send),
	  .CLK_slow_clock(tx$CLK_slow_clock),
	  .CLK_GATE_slow_clock());

  // rule RL_sendSignal
  assign WILL_FIRE_RL_sendSignal = tx$RDY_data_store && state1 ;

  // rule RL_sendBuffer
  assign WILL_FIRE_RL_sendBuffer = tx$RDY_data_store && !state1 ;

  // register counter
  assign counter$D_IN = counter + 1'd1 ;
  assign counter$EN = 1'd1 ;

  // register state1
  assign state1$D_IN = !WILL_FIRE_RL_sendSignal ;
  assign state1$EN = WILL_FIRE_RL_sendSignal || WILL_FIRE_RL_sendBuffer ;

  // submodule tx
  assign tx$data_store_data = WILL_FIRE_RL_sendSignal ? 8'h41 : 8'h42 ;
  assign tx$EN_data_store =
	     WILL_FIRE_RL_sendSignal || WILL_FIRE_RL_sendBuffer ;

  // remaining internal signals
  assign _1__q1 = 2'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!`BSV_RESET_VALUE == `BSV_RESET_VALUE)
      begin
        state1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (state1$EN) state1 <= `BSV_ASSIGNMENT_DELAY state1$D_IN;
      end
  end

  always@(posedge led_c1$CLK_OUT)
  begin
    if (!`BSV_RESET_VALUE == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 1'h0;
    state1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTb

