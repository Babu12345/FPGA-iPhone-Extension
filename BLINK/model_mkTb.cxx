/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Nov 10 14:44:02 UTC 2018
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTB.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTB::MODEL_mkTB()
{
  mkTB_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTB()
{
  MODEL_mkTB *model = new MODEL_mkTB();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTB &INST_top = *((MOD_mkTB *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_NOT_start_reg_1_0_OR_fired_1_AND_NOT_start_reg_ETC___d25;
	 tUInt8 DEF_INST_top_DEF_NOT_start_reg_1_0_OR_fired___d21;
	 tUInt8 DEF_INST_top_DEF_start_reg__h989;
	 tUInt8 DEF_INST_top_DEF_running__h1093;
	 tUInt8 DEF_INST_top_DEF_fired__h608;
	 tUInt8 DEF_INST_top_DEF_start_reg_1__h606;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_start_reg__dreg_update;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_start_reg__dreg_update;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_fired__dreg_update;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_fired__dreg_update;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_restart;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_restart;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_action_l14c9;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_action_l14c9;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_fsm_start;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_fsm_start;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_auto_start;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_auto_start;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_auto_finish;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_auto_finish;
	 DEF_INST_top_DEF_start_reg_1__h606 = INST_top.INST_start_reg_1.METH_read();
	 DEF_INST_top_DEF_fired__h608 = INST_top.INST_fired.METH_read();
	 DEF_INST_top_DEF_running__h1093 = INST_top.INST_running.METH_read();
	 DEF_INST_top_DEF_start_reg__h989 = INST_top.INST_start_reg.METH_read();
	 DEF_INST_top_DEF_NOT_start_reg_1_0_OR_fired___d21 = !DEF_INST_top_DEF_start_reg_1__h606 || DEF_INST_top_DEF_fired__h608;
	 DEF_INST_top_DEF_NOT_start_reg_1_0_OR_fired_1_AND_NOT_start_reg_ETC___d25 = DEF_INST_top_DEF_NOT_start_reg_1_0_OR_fired___d21 && !DEF_INST_top_DEF_start_reg__h989;
	 DEF_INST_top_DEF_CAN_FIRE_RL_auto_finish = DEF_INST_top_DEF_running__h1093 && DEF_INST_top_DEF_NOT_start_reg_1_0_OR_fired_1_AND_NOT_start_reg_ETC___d25;
	 DEF_INST_top_DEF_WILL_FIRE_RL_auto_finish = DEF_INST_top_DEF_CAN_FIRE_RL_auto_finish;
	 DEF_INST_top_DEF_CAN_FIRE_RL_auto_start = DEF_INST_top_DEF_NOT_start_reg_1_0_OR_fired_1_AND_NOT_start_reg_ETC___d25 && !DEF_INST_top_DEF_running__h1093;
	 DEF_INST_top_DEF_WILL_FIRE_RL_auto_start = DEF_INST_top_DEF_CAN_FIRE_RL_auto_start;
	 DEF_INST_top_DEF_CAN_FIRE_RL_fired__dreg_update = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_fired__dreg_update = DEF_INST_top_DEF_CAN_FIRE_RL_fired__dreg_update;
	 DEF_INST_top_DEF_CAN_FIRE_RL_fsm_start = DEF_INST_top_DEF_NOT_start_reg_1_0_OR_fired___d21 && DEF_INST_top_DEF_start_reg__h989;
	 DEF_INST_top_DEF_WILL_FIRE_RL_fsm_start = DEF_INST_top_DEF_CAN_FIRE_RL_fsm_start;
	 DEF_INST_top_DEF_CAN_FIRE_RL_start_reg__dreg_update = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_start_reg__dreg_update = DEF_INST_top_DEF_CAN_FIRE_RL_start_reg__dreg_update;
	 DEF_INST_top_DEF_CAN_FIRE_RL_restart = (DEF_INST_top_DEF_start_reg_1__h606 && !DEF_INST_top_DEF_fired__h608) && (!INST_top.INST_abort.METH_whas() || !INST_top.INST_abort.METH_wget());
	 DEF_INST_top_DEF_WILL_FIRE_RL_restart = DEF_INST_top_DEF_CAN_FIRE_RL_restart;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_auto_start)
	   INST_top.RL_auto_start();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_fsm_start)
	   INST_top.RL_fsm_start();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_restart)
	   INST_top.RL_restart();
	 DEF_INST_top_DEF_CAN_FIRE_RL_action_l14c9 = INST_top.INST_start_wire.METH_whas() && INST_top.INST_start_wire.METH_wget();
	 DEF_INST_top_DEF_WILL_FIRE_RL_action_l14c9 = DEF_INST_top_DEF_CAN_FIRE_RL_action_l14c9;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_action_l14c9)
	   INST_top.RL_action_l14c9();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_auto_finish)
	   INST_top.RL_auto_finish();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_fired__dreg_update)
	   INST_top.RL_fired__dreg_update();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_start_reg__dreg_update)
	   INST_top.RL_start_reg__dreg_update();
	 INST_top.INST_fired_1.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_abort.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_start_reg_2.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_start_wire.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_start_reg.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_start_reg_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_fired.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_running.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTB::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTB_instance = new MOD_mkTB(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTB_instance->INST_start_wire.set_clk_0)("CLK");
  (mkTB_instance->INST_start_reg_2.set_clk_0)("CLK");
  (mkTB_instance->INST_abort.set_clk_0)("CLK");
  (mkTB_instance->INST_fired_1.set_clk_0)("CLK");
  (mkTB_instance->set_clk_0)("CLK");
}
void MODEL_mkTB::destroy_model()
{
  delete mkTB_instance;
  mkTB_instance = NULL;
}
void MODEL_mkTB::reset_model(bool asserted)
{
  (mkTB_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTB::get_instance()
{
  return mkTB_instance;
}

/* Fill in version numbers */
void MODEL_mkTB::get_version(unsigned int *year,
			     unsigned int *month,
			     char const **annotation,
			     char const **build)
{
  *year = 2016u;
  *month = 7u;
  *annotation = "beta1";
  *build = "34806";
}

/* Get the model creation time */
time_t MODEL_mkTB::get_creation_time()
{
  
  /* Sat Nov 10 14:44:02 UTC 2018 */
  return 1541861042llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkTB::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkTB::dump_state()
{
  (mkTB_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTB & mkTB_backing(tSimStateHdl simHdl)
{
  static MOD_mkTB *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTB(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTB::dump_VCD_defs()
{
  (mkTB_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTB::dump_VCD(tVCDDumpType dt)
{
  (mkTB_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTB_backing(sim_hdl));
}
