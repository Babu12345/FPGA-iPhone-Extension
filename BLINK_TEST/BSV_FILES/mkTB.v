//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Mon Nov 19 01:50:29 UTC 2018
//
//
// Ports:
// Name                         I/O  size props
// LED                            O     1
// RDY_led                        O     1 const
// USBPU                          O     1 const
// RDY_usbpu                      O     1 const
// CLK                            I     1 clock
// RST                            I     1 reset
//
// No combinational paths from inputs to outputs
//
//
// This is the module to control the built-in LED
// Remember to pay attention to the reset value in the verilog file
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif
`define BSV_POSITIVE_RESET
`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTB(CLK,
	    RST,

	    LED,
	    RDY_led,

	    USBPU,
	    RDY_usbpu);
  input  CLK;
  input  RST;

  // value method led
  output LED;
  output RDY_led;

  // value method usbpu
  output USBPU;
  output RDY_usbpu;

  // signals for module outputs
  wire LED, RDY_led, RDY_usbpu, USBPU;

  // register counter
  reg [25 : 0] counter;
  wire [25 : 0] counter$D_IN;
  wire counter$EN;

  // ports of submodule led1
  wire led1$led, led1$led_val;

  // remaining internal signals
  wire [31 : 0] _0b101010001110111011100010101__q1;

  // value method led
  assign LED = led1$led ;
  assign RDY_led = 1'd1 ;

  // value method usbpu
  assign USBPU = 1'b0 ;
  assign RDY_usbpu = 1'd1 ;

  // submodule led1
  mkLED led1(.CLK(CLK), .RST(RST), .led_val(led1$led_val), .led(led1$led));

  // register counter
  assign counter$D_IN = counter + 26'd1 ;
  assign counter$EN = 1'd1 ;

  // submodule led1
  assign led1$led_val = _0b101010001110111011100010101__q1[counter[25:21]] ;

  // remaining internal signals
  assign _0b101010001110111011100010101__q1 =
	     32'b00000101010001110111011100010101 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 26'd0;
      end
    else
      begin
        if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 26'h2AAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTB

